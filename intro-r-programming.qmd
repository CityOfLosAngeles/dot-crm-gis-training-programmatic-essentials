---
title: "Intro to R Programming"
format:
  html:
    number-sections: false
---

## Tour of RStudio

::: {.callout-tip title="R vs RStudio: What’s the Difference?"}
**R** is a **programming language** used for statistical computing and data analysis. It provides the core functions and packages needed to perform tasks like data wrangling, modeling, and visualization.

**RStudio**, is an **Integrated Development Environment (IDE)** for R. It offers a user-friendly interface with tools like a script editor, console, environment viewer, and built-in plotting pane, which make coding in R more efficient and organized.
:::

When you first open RStudio, you'll see the following panes:

```{r}
#| echo: false
#| fig-align: center

knitr::include_graphics("images/windows-rstudio.png")
```

-   Left Pane: The **Console** is where R executes your code. You can enter commands directly for immediate feedback, making it ideal for testing individual lines of code, inspecting data structures, or running quick calculations during exploratory data analysis.
-   Top-Right: The **Environment** pane provides a real-time overview of the objects currently stored in your R session, including datasets, functions, and variables. It allows you to monitor your workspace as it evolves and serves as a helpful reference when managing data throughout your workflow.
-   Bottom-Right: The **Tools** multipurpose pane gives access to a range of utilities: data visualizations (Plots), your working directory (Files), package documentation and function references (Help), and output previews from R Markdown documents or Shiny applications (Viewer). It is especially useful when combining scripting with documentation or interactive tools.
-   Top-Left: The **Source** pane is where you develop and edit your code and documentation. It supports a variety of file types, including R scripts (`.R`), R Markdown (`.Rmd`), Quarto documents (`.qmd`), and Jupyter Notebooks (`.ipynb`). This pane allows for building reproducible workflows, writing narrative reports that integrate code and results, or developing interactive notebooks for teaching and analysis. Its tabbed interface allows for easy navigation between multiple files. Note: We don't see this pane open in this screenshot, but that's because we don't have any files open yet!

## Coding in the Console

::: {.callout-important title="But first, an important question: where are we?"}
When you first open RStudio, you're placed in your Home directory. You’ll notice this location indicated by the tilde symbol (`~`) at the top of the Console. This symbol is shorthand for your user’s home folder and is the starting point for your R session.

In the Files pane (bottom-right), you’ll see a visual representation of the contents of your Home directory. You can click through folders and browse your file system from here. However, it’s **important to understand that navigating through the Files pane doesn’t change your working directory in R**. In other words, no matter how deep you click into subfolders, R will still consider your location to be `~` until you explicitly tell it otherwise by opening an R Project.
:::

At its most basic, we can use R as a calculator:

```{r}
#| eval: false
# run each expression in the Console
2 + 5
400 / 10
(6 - 1 + 8) / 3
sin(pi / 2)
```

Use the up arrow key to bring back the last code we ran in the Console, in this case: `sin(pi / 2)`. Delete the closing parenthesis and notice what happens.

```{r}
#| eval: false
> sin(pi / 2
+
```

The Console has changed the prompt from `>` to `+`. This means R is waiting for more input to complete the command. We often see this when we forget to close a parenthesis, quote, or bracket.

To fix this, we can either:

-   Finish the command by typing the closing parenthesis and pressing Enter, or
-   Press Esc to cancel the incomplete command and return to the standard prompt (`>`).

The `+` prompt is a helpful clue when debugging code as it usually means R is expecting more syntax to complete the command.

### Creating Objects in R with the Assignment Operator (`<-`) {.unnumbered}

In R, most of the time you’ll be creating objects and this is done using assignment statements using the assignment operator, `<-`.

```{r}
#| eval: false

# run this code in the Console
# human translation of this code: "object x gets value of 3 * 4"
x <- 3 * 4

# after you hit Enter, what happened?
# call "x" to view the value you've assigned it
```

Assignment statements follow a consistent pattern:

```{r}
#| eval: false
object_name <- value
```

You’ll write a lot of assignments, so it’s worth getting comfortable with this syntax. While you can use `=` to assign values, it’s best to stick with `<-`. Using `=` can lead to confusion, especially when calling functions, where `=` is used to specify arguments.

To make typing `<-` easier, use RStudio’s built-in keyboard shortcut: `Alt` + `-` (minus sign)

RStudio will insert spaces around `<-` automatically, which is a great formatting habit. Clean code is easier to read - for you, your future self, and your collaborators. Let your code breathe and use spacing to make your code more understandable:

```{r}
#| eval: false
# write your code like this
my_value <- 5

# not like this
my_value<-5
my_value=5
```

### Naming Things

When naming objects, observations, data frames, or files make them:

::: panel-tabset
#### Meaningful

```{r}
#| echo: false

knitr::include_graphics("images/1_naming_things_meaningful.png")
```

*Slide credit: Allison Horst EDS 221: Scientific programming essentials for the Bren School's Master of Environmental Data Science.*

#### Consistent

```{r}
#| echo: false

knitr::include_graphics("images/2_naming_things_consistent.png")
```

*Slide credit: Allison Horst EDS 221: Scientific programming essentials for the Bren School's Master of Environmental Data Science.*

#### Concise

```{r}
#| echo: false

knitr::include_graphics("images/3_naming_things_concise.png")
```

*Slide credit: Allison Horst EDS 221: Scientific programming essentials for the Bren School's Master of Environmental Data Science.*

#### Code & Coder Friendly

```{r}
#| echo: false

knitr::include_graphics("images/4_naming_things_code_coder_friendly.png")
```

*Slide credit: Allison Horst EDS 221: Scientific programming essentials for the Bren School's Master of Environmental Data Science.*
:::

## Coding in an R Script

So far, we’ve been running code directly in the Console, which is great for quick experimentation. Now let’s try using an R Script instead.

**An R Script is simply a plain text file where you can write and save your R code.** When you run code from an R Script in RStudio, it behaves just like typing the same commands into the Console. RStudio takes the code and sends it line by line to the Console for execution.

Using an R Script is helpful for keeping your work organized, reproducible, and easy to edit or rerun later. It’s a best practice for writing and saving longer pieces of code or entire analysis workflows.

::: {.callout-warning icon="false" title="Create an R Script"}
1.  Go to the **File** menu in the top-left corner of RStudio.
2.  Select **New File \> R Script** from the dropdown options.

RStudio will automatically open a new blank R Script. You’ll notice a new pane appears above the Console - the Source pane! It's where you’ll write and edit your R code or documents. This pane only appears when you have a file open in the editor.

3.  Save your new R Script by clicking **File \> Save** (or using the shortcut `Ctrl` + `S` or `Cmd` + `S` on Mac).
4.  Name the file `intro_to_programming.R` and save it in your R Project `r_training_{LAST_NAME}`.
:::

### How to Run Code from an R Script

Running code from an R Script works a little differently than running code directly in the Console - you can’t just press Return or Enter. Instead, you need to send the code from the script (in the Source pane) to the Console, where R will interpret and run it.

Here are some common ways to do this:

1.  **Run a single line of code:** Place cursor on the line to run, then press `Ctrl` + `Enter` (Windows) or `Command` + `Return` (Mac), or click the Run button in the top-right corner of the Source pane.

2.  **Run multiple lines of code:** Highlight the block of code you want to run, then use the same shortcut (`Ctrl` + `Enter` or `Command` + `Return`), or click the Run button.

3.  **To run the entire script you can either:** Press `Ctrl` + `Shift` + `Enter` (Windows) or `Command` + `Shift` + `Return` (Mac), or go to the top menu and choose Code \> Run Region \> Run All.

::: {.callout-tip title="R Executes Code from Top to Bottom"}
When you run an entire R Script, R reads it from top to bottom, line by line. This means **the order of your code matters—objects must be created before they're used, and functions must be defined before you call them.** Keeping your script well-organized and logically ordered is key to avoiding errors.
:::

### R Calculations with Objects

So we know that objects are how R stores information, and we know we create objects using the assignment operator `<-`. Let’s build upon that and learn how to use an object in calculations.

Imagine we hired a taxi and after the trip, paid a fare of \$18.75. Let's create an object for the taxi fare and assigned it the total fare paid.

```{r}
# total taxi fare
taxi_fare <- 18.75
```

Now that R has `taxi_fare` saved in the Global Environment, we can run calculations with it.

::: {.callout-warning icon="false" title="Exercise 1"}
Add a 15% tip to the taxi fare total.

<details>

<summary>Answer:</summary>

```{r}
taxi_fare * 1.15
```

</details>
:::

You’re not limited to storing just one value in an object - **you can also store a series of values, which allows you to apply the same operation across all of them at once.** This is especially useful when working with related measurements, like a group of taxi fares.

To create an object that holds multiple values, we use the `c()` function, which stands for combine or concatenate. Let’s use it to make a vector of taxi fares:

```{r}
#| output: false
# vector of taxi fares
taxi_fares <- c(18.75, 15.38, 20.42)
# call object to inspect
taxi_fares
```

*We’ll dive deeper into vectors in the upcoming [Data Structures in R](#data-structures) section.*

::: {.callout-warning icon="false" title="Exercise 2"}
Let's add a 15% trip to *all* the fares.

<details>

<summary>Answer:</summary>

```{r}
taxi_fares * 1.15
```

</details>
:::

What if we want to use the new values we calculated later? It would be much more efficient to save them instead of repeating the calculation each time.

```{r}
#| output: false
# create a new object 
fares_with_tip <- taxi_fares * 1.15
# call `fares_with_tip` to check if the information you expect is there
fares_with_tip
```

### Logical operators and expressions

We can **ask questions about an object using logical operators and expressions**. Let’s ask some "questions" about the `taxi_fare` object we made.

-   `==` means "is equal to"
-   `!=` means "is" not equal to
-   `<` means "is less than"
-   `>` means "is greater than"
-   `<=` means "is less than or equal to"
-   `>=` means "is greater than or equal to"

```{r}
#| output: false
# examples using logical operators and expressions
taxi_fare == 18.75
taxi_fare >= 30
taxi_fare != 5
```

## Data Types in R

Most common data types we'll find in R:

+-----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Data Type                                           | Definition                                                                                                                                                                                                                                                                                                                        |
+=====================================================+===================================================================================================================================================================================================================================================================================================================================+
| **Numeric**                                         | In general, these are **numbers** (e.g., 15.7 or -0.98)                                                                                                                                                                                                                                                                           |
|                                                     |                                                                                                                                                                                                                                                                                                                                   |
| *Integer, float, and double are subsets of numeric* | Integers are **whole numbers**, created with an L suffix (e.g., `2L`).                                                                                                                                                                                                                                                            |
|                                                     |                                                                                                                                                                                                                                                                                                                                   |
|                                                     | **Float** and **Double** are both decimal number types. In R, numbers are usually stored as **64-bit** **doubles**, offering more precision than **32-bit** **floats**. You typically don’t need to worry about the difference, but floats can be useful when optimizing memory or working with tools that require 32-bit values. |
+-----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Character**                                       | Non-numeric letters or symbols and numbers stored as characters (think IDs).                                                                                                                                                                                                                                                      |
|                                                     |                                                                                                                                                                                                                                                                                                                                   |
|                                                     | Sequences of characters are typically called strings (e.g., "Hello World").                                                                                                                                                                                                                                                       |
+-----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Logical (Boolean)**                               | Holds only one of two values: either `TRUE` or `FALSE`. Some times these are coded as 0 or 1.                                                                                                                                                                                                                                     |
|                                                     |                                                                                                                                                                                                                                                                                                                                   |
|                                                     | Temporary logicals are an important part of data wrangling (e.g., matching conditions to subset data).                                                                                                                                                                                                                            |
+-----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Factor**                                          | Distinct data type for representing **categorical variables**, levels can be:                                                                                                                                                                                                                                                     |
|                                                     |                                                                                                                                                                                                                                                                                                                                   |
|                                                     | -   **ordered** (ordinal; e.g. education levels \[middle school, high school, college\] or responses \[agree, neutral, disagree\], and sometimes year \[FY21, FY22, FY23\] depending on your analysis),                                                                                                                           |
|                                                     |                                                                                                                                                                                                                                                                                                                                   |
|                                                     | -   **unordered** (nominal; e.g., color \[green, purple, orange\] or gender \[male, female, non-binary\])                                                                                                                                                                                                                         |
+-----------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

: {tbl-colwidths="\[30,70\]" .striped}

::: {.callout-note title="Less Common Data Types in R" collapse=true}

+----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Data Type                        | Definition                                                                                                                                                                                                    |
+==================================+===============================================================================================================================================================================================================+
| **Complex**                      | This data type represents numbers that have both real and imaginary parts, such as `2 + 3i`. These are useful for mathematical computations involving complex numbers, often seen in engineering and physics. |
+----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| **Raw**                          | This type stores data as raw bytes, typically used for handling binary data or working with lower-level operations like file manipulation.                                                                    |
+----------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

: (We won’t be covering these data types) {.striped .hover tbl-colwidths="\[25,75\]"}

:::

### Creating & Working with Data Types

::: {.callout-warning icon=false title="Exercise 1: Character Data" collapse=true}
Create the character vector and then investigate the object using `typeof()` and then `class()`.
```{r}
#| eval: false
micromobility <- c("scooter", "e-bike", "robot delivery devices")
```
:::

::: {.callout-warning icon=false title="Exercise 2: Numeric Data" collapse=true}
Create the numeric vector and then investigate the object using `typeof()` and then `class()`.
```{r}
#| eval: false
weights <- c(20, 35, 44, 50)
```

Create the integer vector and then investigate the object using `typeof()` and then `class()`.
```{r}
#| eval: false
ages <- c(10L, 15L, 21L, 65L)

# check with a logical test
is.numeric(ages)
```
:::

::: {.callout-warning icon=false title="Exercise 3:  Interacting with Different Data Types" collapse=true}
Copy the code below and run it in the Console. What happened?
```{r}
#| eval: false
"scooter" * 20
```

**This exercise highlights an important concept:** In R, objects come in different "classes" or types, and the operations you can perform depend on the object’s type. Just like you wouldn’t use a car to eat soup, you can't perform all operations on character objects. Each object type has a specialized format for its specific purpose.
:::

## Data Structures in R {#data-structures}

When we combine multiple data types, we create **data structures**. We're going to discuss three data structures in R: (Atomic) Vectors, Lists, and Data Frames.

### 1. (Atomic) Vectors

**An atomic vector is a flat sequence of elements, all of the same type.** 

Atomic vectors are the most common type of vector in R, and you'll encounter them frequently. Vectors serve as the building blocks for many other data structures in R, including data frames.

Properties of vectors:

-   Type (e.g. character, numeric, logical)
-   Length (how many elements in the vector?)
-   Attributes (associated metadata)

**Vectors can only contain a single data type.** If different elements are added, the "most flexible" will be assigned to all elements in the vector. 

Data types from least to most flexible are: logical, integer, double, and character.

::: {.callout-warning icon=false collapse=true title="Exercise 1: Combine Classes"}

Create the vector and then investigate the object using `typeof()` and then `class()`.

*Remember there is a hierarchy in R. When combining values into a single vector, R coerces everything to the most flexible (least restrictive) type. If any element is a character, the entire vector will be of type character.*
```{r}
#| eval: false
ladot_info <- c("100 Main St", 1300, 10L)

# check with a logical test
is.character(ladot_info)
is.vector(ladot_info)
```
:::

#### Indexing Vectors

**Indexing means accessing elements from a data structure.**

For a vector (or a one-dimensional array), we access an element by position using square brackets `[]`.

Important to note that in an R vector, the first element position = 1. This is different from other languages, like python, that use a zero index where the first element in a vector is position = 0.

::: {.callout-warning icon=false collapse=true title="Exercise 2: Vector Indexing"}

Access the second element in the `micromobility` character vector.
```{r}
#| eval: false
micromobility[2]
```

:::


### 2. List

**A list is a flat sequence of objects, each of which can be anything — including other lists!**

To create a list we use the function `list()`:
```{r}
#| eval: false
metro_bike <- list("e-bike", 29, "green", 36L)

# check with a logical test
is.list(metro_bike)
is.vector(metro_bike)
```

Unlike vectors, which require all elements to be of the same type, **lists** are flexible structures that:

- are ideal for **storing complex or heterogeneous** data types,
- allow each **element to be named** (helpful for organizing and accessing structured data),
- are often used to **return multiple outputs** from functions or to **store results** such as model outputs.

#### Indexing Lists

Like vectors, list elements can be accessed by their position using square brackets. However, unlike vectors, lists offer two ways to extract elements: 

- using a single pair of square brackets `[]`, which returns a list or object,
- or a double pair `[[]]`, which returns the elements within the list.

::: {.callout-warning icon=false collapse=true title="Exercise 3: Index a list"}

Create the list `caltrans_hq`, then use square brackets to return the third object and then the elements stored in the third list.
```{r}
#| eval: false
caltrans_hq <- list("Thom Mayne", c(9L, 10L, 11L), c("Caltrans", "LADOT"), 2004)
# call the list to see how it prints in R
caltrans_hq
```

*Important: a single `[]` returns a list. `[[]]` returns the item(s) STORED in the list.*

```{r}
#| eval: false
caltrans_hq[3]

caltrans_hq[[3]]
```
:::

In a **named list**, you can also access elements by name.

::: {.callout-warning icon=false collapse=true title="Exercise 4: Named Lists"}
Create the named list and access the first element using `[]` and then the subset operator `$` or "name" of the list.
```{r}
#| eval: false
named_list_caltrans_hq <- list(
  architect = "Thom Mayne",
  ladot_floors = c(9L, 10L, 11L),
  departments = c("Caltrans", "LADOT"),
  year_opened = 2004
)

named_list_caltrans_hq
```

```{r}
#| eval: false

# index with square brackets
named_list_caltrans_hq[[1]]
```

```{r}
#| eval: false

# index with the name / subset operator (`$`)
named_list_caltrans_hq$architect
```
:::

A more realistic example of how a list can store outputs from a model:

```{r}
#| eval: false
# mtcars is a pre-loaded dataset in R #

# fit a linear model
model <- lm(mpg ~ hp, data = mtcars)

# check the type of object
class(model) # lm
is.list(model)

# peek inside the list
names(model)

# access model coefficients
model$coefficients
```

### 3. Data Frames

**A data frame is a list of equal-length vectors, organized into a two-dimensional tabular structure** where:

- Each column is a vector.
- All vectors (columns) must be the same length.
- Each vector can be of a different type (numeric, character, logical, etc.).

A data frame is the most common data structure in R and with tidy data makes data analysis easier.

To create a list we use the function `data.frame()`:
```{r}
#| eval: false
ladot_employees_df <- data.frame(
  name = c("Mia", "Alex", "Joe"),
  years_employed = c(12, 1, 5),
  civil_service_appt = c(TRUE, FALSE, TRUE)
)
```

#### Indexing Data Frames

Like vectors and lists, elements within a data frame can be accessed using square brackets. However, unlike vectors and lists, data frames are two-dimensional structures, so elements are accessed using a row and column index in the format `[row, column]`.

::: {.callout-warning icon=false collapse=true title="Exercise 5: Index a df"}
Using the `ladot_employees_df` data frame we created above, pull out the number of years that Mia has been employed.
```{r}
#| eval: false
ladot_employees_df[1, 2]
```
:::


::: {.callout-warning icon=false collapse=true title="Exercise 6: Index a row in a df"}
Using the `ladot_employees_df` data frame we created above, access the row for the employee Alex.

In a data frame, you can use square brackets `[]` to access specific rows and columns with the format `df[row, column]`. If you leave either the **row or column index blank, but keep the comma, it tells R to return all rows or all columns, respectively.**

```{r}
#| eval: false
ladot_employees_df[2,]
```
:::


::: {.callout-warning icon=false collapse=true title="Exercise 7: Accessing a column vs elements"}

From indexing lists, we learned that `[]` returns a list, while `[[]]` pulls out the actual elements inside the list. Since a data frame is a special type of list, the same rules apply.

Let’s explore this using the `years_employed` column (the second column in `ladot_employees_df`):
```{r}
#| eval: false
ladot_employees_df[2]
# check with a logical test
is.data.frame(ladot_employees_df[2])

# vs

ladot_employees_df[[2]]
# check with a logical test
is.data.frame(ladot_employees_df[[2]])
is.vector(ladot_employees_df[[2]])
```
:::

::: {.callout-warning icon=false collapse=true title="Exercise 8: Updating an element"}
With indexing, we can also update elements in a data frame by assigning new values using square brackets `[]`.

Let’s say Alex’s civil service appointment was entered incorrectly — it should be `TRUE` instead of `FALSE.` We can fix that by targeting the specific cell and assigning a new value:
```{r}
#| eval: false
# update civil service appt
ladot_employees_df[2, 3] <- TRUE
```
:::

::: {.callout-warning icon=false collapse=true title="Bonus! Reproducibility Check"}
Let’s say we need to save Joe’s years employed for a future calculation. Consider the two code snippets below:
```{r}
#| eval: false
# option 1: hard code value
joe_yrs_employed <- 5

# vs

# option 2: index from df
joe_yrs_employed <- ladot_employees_df$years_employed[3]
```

**Which one is more reproducible?** 

- Option 2 is the more reproducible choice because it pulls the value directly from your data. If the data changes — for example, if Joe's years employed is updated, or the number of years is recalculated — Option 2 will always reflect the current value.
- Option 1 is risky because it hard-codes a number that may go out of date. It also relies on you remembering where the value came from, which can make your code harder to maintain or audit later.

- Where Option 2 could break: 
    - If row order changes (e.g., sorting the data), then `ladot_employees_df$years_employed[3]` might no longer point to Joe’s row.
    - If you add or remove rows, the position could shift.
:::

## Functions in R

::: {.callout-tip title="What's a function?"}
A function is a self-contained piece of code that takes input(s), performs a specific task, and returns an output
:::

R has a large collection of built-in functions, and all functions are **called** using the same basic syntax:

```{r}
#| eval: false

function_name(argument_1 = value_1, argument_2 = value_2, ...)
```

You call a function by writing its name, followed by parentheses that include any information the function needs — these are called arguments. Arguments are the inputs that tell the function how to do its job. Some functions only need one argument, while others can take several. Knowing what arguments a function expects (and in what order or format) is key to using it effectively and getting the result you want.

### Help Pages

How do we learn more about a function and the arguments it takes? We look at the help documentation! This is especially useful when you're working with a function you haven’t used before or want to understand all the available arguments.

Let's open the help page for `mean()`, type this in your Console:
```{r}
#| eval: false

?mean
```

This will open the Help pane in the lower-right corner of RStudio, showing detailed information about the function. Here's how the help page is usually organized:

- **Description**: A short overview of what the function does.
- **Usage**: The function’s syntax, including its arguments and default values.
- **Arguments**: A breakdown of what each argument means and expects.
- **Details**: Additional context or edge cases to be aware of.
- **Value**: What the function returns after it runs.
- **See Also**: Links to related functions you might want to explore.
- **Examples**: Ready-to-run code samples that show the function in action.

**Need more help?** Many packages include vignettes - detailed guides on how to use their functions. Google `package_name` vignette (e.g., dplyr vignette) or check the package’s CRAN page for links.

::: {.callout-tip title="Bonus: Help with Debugging"}

When the debugging blues start to hit...reach out for help! I highly recommend the workshop [Teach Me How to Google](https://ucsb-meds.github.io/teach-me-how-to-google/#1) by Sam Csik. It’s packed with practical tips to level up your troubleshooting game.

Remember: feeling frustrated and even walking away from your code is totally normal. It’s all part of the process.

```{r}
#| echo: false

knitr::include_graphics("images/debugging_feelings_ah.png")
```

:::